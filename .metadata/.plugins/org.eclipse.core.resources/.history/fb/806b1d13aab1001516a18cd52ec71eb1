// Stephen Hung
// 1/1/16
// This program will attempt to summarize any article
// the user inputs.
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Scanner;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class SummarizeText {
	private static Scanner input;
	private static String rawText;
	private static PrintWriter output;
	
	public static void main(String[]args){
		createJFrame();
	}
	
	public static void setScanner(Scanner temp){
		input = temp;
		try {
			output = new PrintWriter(new File("articleFinal.txt"));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static void createJFrame(){
		JFrame f = new JFrame("Summarize Text");
		JPanel p = new JPanel(new BorderLayout());
		JButton b = new JButton("Open File");
		f.setContentPane(p);
		b.addActionListener(new buttonListener(b));
		p.add(b);
		f.setSize(100,100);
		f.setVisible(true);
		f.setLocation(500,250);
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
	
	public static void readText(){
		String result = "";
		while(input.hasNextLine()){
			result += input.nextLine();
			result += "\n";
		}
		rawText = result;
		readRawText();
	}
	
	public static void readRawText(){
		Scanner paragraphReader = new Scanner(rawText);
		String paragraph = "";
		Scanner lineReader = null;
		String line = "";
		String tempLine = "";
		ArrayList<String> sentences = new ArrayList<String>();
		while(paragraphReader.hasNextLine()){
			paragraph = paragraphReader.nextLine();
			lineReader = new Scanner(paragraph);
			while(lineReader.hasNext()){
				tempLine = lineReader.next();
				if(tempLine.contains(".")){
					line += tempLine + " ";
					sentences.add(line);
					output.println(line);
					line = "";
				}else{
					line += tempLine + " ";
				}
			}
			readParagraph(sentences);
		}
		output.close();
	}
	
	public static void readParagraph(ArrayList<String> temp){
		ArrayList<Integer> sentenceScore = new ArrayList<Integer>();
		int counter = 0;
		for(int i = 0; i < temp.size(); i++){
			for(int j = 0; j < temp.size(); j++){
				counter += intersectionCount(temp.get(i),temp.get(j));
			}
			sentenceScore.add(counter);
			counter = 0;
		}
	}
	
	public static int intersectionCount(String a, String b){
		int result = 0;
		Scanner aReader = new Scanner(a);
		for(int i = 0; i < a.length(); i++){
			Scanner bReader = new Scanner(b);
			while(bReader.hasNext()){
				
			}
		}
		return result;
	}
	
}

class buttonListener implements ActionListener{
	private JButton bu;
	
	public buttonListener(JButton b){
		bu = b;
	}
	
	public void actionPerformed(ActionEvent e){
		if(e.getActionCommand().equals("Open File")){
			JFileChooser fc = new JFileChooser();
		    int returnVal = fc.showOpenDialog(null);
		    retrieveText(returnVal,fc);
		}
	}
	
	public void retrieveText(int returnVal,JFileChooser fc){
	    if (returnVal == JFileChooser.APPROVE_OPTION) {
	        File file = fc.getSelectedFile();
	        try {
	        	System.out.println("reached scanner");
	        	SummarizeText.setScanner(new Scanner(file));
	        	SummarizeText.readText();
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	        System.out.println("Opening: " + file.getName() + ".\n");
	    } else {
	        System.out.println("Open command cancelled by user.\n");
	    }
	}
}